High-Level Flow

    1. User Uploads Prescription → Image or Text input
    2. Text Extraction → OCR extracts raw text (if input is image)
    3. Preprocessing → Clean extracted text (remove noise, split sentences)
    4. Medicine & Symptom Extraction → NER model identifies medicines and symptoms
    5. RAG Retrieval Process:
        • Query knowledge base with detected medicines
        • Retrieve related diseases, symptoms (if not detected), side effects
        • Retrieve preventive health tips for predicted disease(s)

    6. Combine Results → Merge NER output and retrieved information
    7. Generate Final Output → Structured JSON returned via API/UI

---------------------------------------------------------------------------------
        Final Output: JSON format
            {
              "Detected Medicines": ["Metformin", "Glibenclamide"],
              "Predicted Diseases": ["Type 2 Diabetes Mellitus"],
              "Extracted Symptoms": ["High blood sugar", "Fatigue", "Excessive thirst"],
              "Side Effects": {
                "Metformin": ["Nausea", "Diarrhea", "Abdominal discomfort"],
                "Glibenclamide": ["Hypoglycemia", "Weight gain", "Skin rash"]
              },
              "Health Tips": [
                "Maintain a balanced low-sugar diet",
                "Exercise regularly (30 minutes daily)",
                "Monitor blood sugar levels frequently",
                "Follow prescribed medication schedule"
              ]
            }
---------------------------------------------------------------------------------


MediScan/
  │
  │── data/
  │    ├── prescriptions/               # Raw training images or text
  │    ├── annotated_ner_data.json      # For medicine & symptom extraction (NER)
  │    ├── drug_disease_mapping.csv     # Medicine → Disease knowledge base
  │    ├── drug_side_effects.csv        # Drug → Side effects knowledge base
  │    ├── health_tips.csv              # Disease → Preventive tips knowledge base
  │    └── vector_store/                # FAISS or ElasticSearch index files
  │
  │── models/
  │    ├── ocr_model/                   # For text extraction from images (PaddleOCR/Tesseract)
  │    └── ner_model/                   # Fine-tuned BioBERT for medicine/symptom extraction
  │
  │── src/
  │    ├── ocr_extraction.py            # OCR text extraction module
  │    ├── preprocess.py                # Text cleaning and preprocessing
  │    ├── train_ner.py                 # Training script for NER model
  │    ├── build_knowledge_db.py        # Builds knowledge base CSV + vector index
  │    ├── retriever.py                  # Retrieval functions using FAISS/ElasticSearch
  │    ├── rag_pipeline.py               # Combines NER + Retrieval for final inference
  │    └── utils.py                      # Shared helper functions (tokenizer, configs)
  │
  │── app/
  │    ├── main.py                      # FastAPI/Flask backend
  │    └── ui/                          # Streamlit/React UI for uploads
  │
  │── requirements.txt
  └── README.md


---------------------------------------------------------------------------------